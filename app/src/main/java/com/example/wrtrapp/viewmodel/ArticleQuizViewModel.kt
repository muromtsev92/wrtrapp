package com.example.wrtrapp.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.wrtrapp.data.DatabaseProvider
import com.example.wrtrapp.data.entities.NounEntity
import com.example.wrtrapp.data.repository.NounRepository
import com.example.wrtrapp.ui.state.ArticleUiState
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ArticleQuizViewModel(application: Application) : AndroidViewModel(application) {

    // --- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    private val repository: NounRepository =
        NounRepository(DatabaseProvider.getDatabase(application).nounDao())

    // --- StateFlow –¥–ª—è UI: —Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    private val _uiState = MutableStateFlow(ArticleUiState())
    val uiState: StateFlow<ArticleUiState> = _uiState

    // --- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    private var allWords: List<NounEntity> = emptyList()
    private val usedWordIds = mutableSetOf<Long>()

    // --- Job –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    private var clearMessageJob: Job? = null

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ "–¥–æ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏".
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏–≥—Ä—ã –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.
     */
    fun setStopOnError(enabled: Boolean) {
        _uiState.value = _uiState.value.copy(
            stopOnError = enabled
        )
        startNewGame()
    }


    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ
     */
    fun loadWords() {
        viewModelScope.launch {
            val loaded = repository.getAllNouns()
            allWords = loaded
            if (loaded.isNotEmpty()) {
                val first = loaded.random()
                usedWordIds.add(first.id)
                _uiState.value = _uiState.value.copy(currentWord = first)
            } else {
                _uiState.value = _uiState.value.copy(resultText = "‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ")
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * - –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ:
     *      ‚Ä¢ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
     *      ‚Ä¢ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
     *      ‚Ä¢ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     *
     * - –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ:
     *      ‚Ä¢ –µ—Å–ª–∏ stopOnError –≤–∫–ª—é—á—ë–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É (currentWord = null, –≤—ã–≤–æ–¥–∏–º —Å—á—ë—Ç)
     *      ‚Ä¢ –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
     *      ‚Ä¢ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—à–∏–±–∫–µ —Ç–∞–π–º–µ—Ä –æ–±–Ω—É–ª—è–µ—Ç—Å—è –∏ —Å—Ç–∞—Ä—Ç—É–µ—Ç –∑–∞–Ω–æ–≤–æ
     *      ‚Ä¢ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
     */
    fun checkAnswer(choice: String) {
        val currentWord = _uiState.value.currentWord ?: return
        val correct = choice == currentWord.article

        val translationPart = currentWord.translation?.let { " ‚Äì $it" } ?: ""

        val feedback = if (correct) {
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentWord.article} ${currentWord.word}$translationPart"
        } else {
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—ã–ª–æ: ${currentWord.article} ${currentWord.word}$translationPart"
        }

        _uiState.value = _uiState.value.copy(
            resultText = feedback,
            correctCount = _uiState.value.correctCount + if (correct) 1 else 0,
            incorrectCount = _uiState.value.incorrectCount + if (correct) 0 else 1,
            mistakes = if (correct) _uiState.value.mistakes else _uiState.value.mistakes + currentWord
        )

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ "–¥–æ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏"
        if (_uiState.value.stopOnError && !correct) {
            _uiState.value = _uiState.value.copy(showMistakesScreen = true)
            return
        }

        nextWord()

        clearMessageJob?.cancel()
        clearMessageJob = viewModelScope.launch {
            delay(3000)
            _uiState.value = _uiState.value.copy(resultText = "")
        }
    }


    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
     * - –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
     * - –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
     */
    fun nextWord() {
        val unused = allWords.filterNot { usedWordIds.contains(it.id) }

        if (unused.isNotEmpty()) {
            // –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            val next = unused.random()
            usedWordIds.add(next.id)
            _uiState.value = _uiState.value.copy(currentWord = next)
        } else {
            // --- –í–°–ï —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
            _uiState.value = _uiState.value.copy(
                currentWord = null,
                resultText = "üéâ –í—Å–µ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –°–±—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
        }
    }


    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
     * –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
     */
    fun resetStats() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        _uiState.value = _uiState.value.copy(
            showMistakesScreen = true
        )
    }

    fun startNewGame() {
        usedWordIds.clear()
        _uiState.value = _uiState.value.copy(
            correctCount = 0,
            incorrectCount = 0,
            mistakes = emptyList(),
            resultText = "",
            showMistakesScreen = false
        )
        loadWords()
    }
}
